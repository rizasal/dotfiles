" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc


"" -- Suggested options --
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5

Plug 'easymotion/vim-easymotion'
Plug 'preservim/nerdtree'
Plug 'kana/vim-textobj-entire'

let mapleader=" "
" Do incremental searching.
set easymotion
nmap <tab> <C-;>
set incsearch

" Don't use Ex mode, use Q for formatting.
map Q gq
map <Leader> <Plug>(easymotion-prefix)
" --- Enable IdeaVim plugins https://jb.gg/ideavim-plugins

" Highlight copied text
Plug 'machakann/vim-highlightedyank'

"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"" Map \r to the Reformat Code action
"map \r <Action>(ReformatCode)

"" Map <leader>d to start debug
"map <leader>d <Action>(Debug)

"" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)

set clipboard^=unnamedplus,unnamed

inoremap kj <esc>
Plug 'terryma/vim-multiple-cursors'


nmap <leader>a :action SaveAll<CR>

" Remap multiple-cursors shortcuts to match terryma/vim-multiple-cursors
nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
xmap <C-x> <Plug>SkipOccurrence
xmap <C-p> <Plug>RemoveOccurrence

" Note that the default <A-n> and g<A-n> shortcuts don't work on Mac due to dead keys.
" <A-n> is used to enter accented text e.g. Ã±
nmap <leader><C-n> <Plug>AllWholeOccurrences
xmap <leader><C-n> <Plug>AllWholeOccurrences
nmap <leader>g<C-n> <Plug>AllOccurrences
xmap <leader>g<C-n> <Plug>AllOccurrences

Plug 'tpope/vim-surround'

" nmap <leader>w [w
" nmap <leader>b [b
" nmap <leader>e ]w
" nmap <leader>ge ]b


nmap <leader>or :action RunClass<CR>
nmap <leader>od :action DebugClass<CR>
nmap <leader>ob :action ToggleLineBreakpoint<CR>
nmap <leader>ov :action ViewBreakpoints<CR>
nmap <leader>of :action Switcher<CR>

nmap <C-i> :action Forward<CR>
nmap <C-o> :action Back<CR>

packadd matchit
" helloWorld"
Plug 'tommcdo/vim-exchange'		    # cx{motion} to select, again to exchange
Plug 'tpope/vim-commentary'		    # [count]gc{motion}, o_gc, v_gc, gcc


set hlsearch
set ignorecase
set smartcase
set visualbell
set which-key
set notimeout
set sneak

set showmode
set number relativenumber

" <leader> is \
nnoremap <leader><h> :nohlsearch<CR>

" Toggle case and start typing. E.g. `<leader>iget`: `property` -> `getProperty`
nmap <leader>i ~hi
" Remove selection and toggle case. E.g. `v2l<leader>u`: `getProperty` -> `property`
vmap <leader>u d~H

""" IdeaVim options
" Smart join for <C-J>
set ideajoin
" Map vim marks to IDEA global marks
set ideamarks


""" IdeaVim actions
nmap [[ <Action>(MethodUp)
nmap ]] <Action>(MethodDown)

" Keys from vim-gitgutter
nmap ]c <Action>(VcsShowNextChangeMarker)
nmap [c <Action>(VcsShowPrevChangeMarker)
" Not from vim-gitgutter. ={motion} is for indenting. =c does nothing
nmap =c <Action>(VcsShowCurrentChangeMarker)

" These don't work in Rider, annoyingly. Try HighlightUsagesInFile (see <leader>h below)
nmap ]q <Action>(GotoNextElementUnderCaretUsage)
nmap [q <Action>(GotoPrevElementUnderCaretUsage)

nmap gb <Action>(Back)
nmap gD <Action>(GotoTypeDeclaration)
nmap gf <Action>(Forward)
nmap gl <Action>(QuickJavaDoc)
nmap gL <Action>(QuickImplementations)
nmap gy <Action>(ShowErrorDescription)
nmap gcb <Action>(Annotate)

nmap <leader>b <Action>(ToggleLineBreakpoint)
nmap <leader>C <Action>(CallHierarchy)
" Highlight usages, use CMD+G/Shift+CMD+G to iterate
nmap <leader>h <Action>(HighlightUsagesInFile)
nmap <leader>n <Action>(ReformatCode)
nmap <leader>q <Action>(ToggleRenderedDocPresentation)
nmap <leader>r <Action>(Refactorings.QuickListPopupAction)
nmap <leader>s <Action>(ShowUsages)
" nmap <leader>t <Action>(TypeHierarchy)
nmap <leader>u <Action>(FindUsages)
nmap <leader>v <Action>(Vcs.QuickListPopupAction)
nmap <leader>x <Action>(HideAllWindows)
nmap <leader>p :action ActivatePythonConsoleToolWindow<CR>
nmap <leader>t :action ActivateTerminalToolWindow<CR>

" When in normal mode and I hit Enter
" then save file please
nmap <CR> :write<CR>
nnoremap <Leader>f  :NERDTreeToggle<CR>

" Quick window navigation
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-l> <C-W>l
map <C-h> <C-W>h

nmap <leader>wj <C-W>j
nmap <leader>wk <C-W>k
nmap <leader>wl <C-W>l
nmap <leader>wh <C-W>h
nmap <leader>wm :action MaximizeEditorInSplit<CR>
nmap <c-l> <Action>(NextTab)
nmap <c-h> <Action>(PreviousTab)

nmap <C-l> <Action>(NextTab)
nmap <C-h> <Action>(PreviousTab)
nnoremap zC :action CollapseRegionRecursively<CR>
nnoremap zO :action ExpandRegionRecursively<CR>

nmap <leader>gs <Action>(FileStructurePopup)
" ^U moves lines up, ^D moves lines down.
" Works in normal or visual select modes.
vmap [n <C-u>
vmap ]m <C-d>

nmap <leader>cf <Action>(CopyContentRootPath)

" Harpoon
nmap <leader><leader>1 <action>(HarpoonerOpenFile0)
nmap <leader><leader>2 <action>(HarpoonerOpenFile1)
nmap <leader><leader>3 <action>(HarpoonerOpenFile2)
nmap <leader><leader>4 <action>(HarpoonerOpenFile3)

nmap <leader>hm <action>(HarpoonerQuickMenu)
nmap <leader>ha <action>(HarpoonerAddFile)

nmap <leader>hn <action>(HarpoonerNextFileAction)
nmap <leader>hp <action>(HarpoonerPreviousFileAction)

nmap <leader>` <action>(RunAnything)
nmap <leader>cr <action>(CopyReference)
